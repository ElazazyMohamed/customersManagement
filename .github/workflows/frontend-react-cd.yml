name: CD - Deploy React Frontend

on:
  workflow_dispatch:

  push:
    branches:
      - main
    paths:
      - 'frontend/react/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/react

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Slack Commit message and sha
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '
            {"text":"${{github.sha}} - ${{github.event.head_commit.message}}"}
          '
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Message - Start Deploying Frontend
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '
            {"text":"Deployment Started :progress_bar:"}
          '
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Set Build Number
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#        with:
#          driver-opts: image=moby/buildkit:latest
#
#      - name: Create and use Docker Buildx builder
#        run: |
#          docker buildx create --use --name mybuilder --driver docker-container
#          docker buildx inspect mybuilder --bootstrap

      - name: Build and Push Docker Image
        run: |
          docker build \
            --build-arg api_base_url=${{ secrets.API_BASE_URL }} \
            --platform linux/arm64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/elazazy-react:latest \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/elazazy-react:${{ steps.build-number.outputs.BUILD_NUMBER }} \
            --no-cache \
            --push .

      - name: Slack Message - Image Built & Pushed to Docker Hub
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '
            {"text":"Image pushed to :docker: hub with version ${{ steps.build-number.outputs.BUILD_NUMBER }}"}
          ' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update Dockerrun.aws.json api tag with new build number
        run: |
          echo "Dockerrun.aws.json before updating tag"
          cat ../../Dockerrun.aws.json
          sed -i -E 's_(elazazymohamed/elazazy-react:)([^"]*)_\1'${{ steps.build-number.outputs.BUILD_NUMBER }}'_' ../../Dockerrun.aws.json
          echo "Dockerrun.aws.json after updating tag"
          cat ../../Dockerrun.aws.json

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ secrets.EB_REGION }}
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
          version_description: ${{ github.SHA }}
          deployment_package: Dockerrun.aws.json
          wait_for_environment_recovery: 60

      - name: Slack Message - Deployed to AWS
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '
            {"text":"Application deployed to :aws: Elastic Beanstalk"}
          ' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Commit and push Dockerrun.aws.json
        run: |
          git config user.name github-actions 
          git config user.email github-actions@github.com
          git add ../../Dockerrun.aws.json
          git commit -m "Update Dockerrun.aws.json docker image with new tag ${{ steps.build-number.outputs.BUILD_NUMBER }}"
          git push

      - name: Slack Message - Deployment sCompleted
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '
            {"text":"Deployment Completed :done:"}
          ' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Deployment Status
        if: always()
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '
            {"text":"Deployment ${{ job.status }}"}
          ' 
          ${{ secrets.SLACK_WEBHOOK_URL }}